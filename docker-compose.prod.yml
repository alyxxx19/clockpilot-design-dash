# ========================
# Docker Compose - Production Configuration
# ========================

version: '3.8'

services:
  # ========================
  # ClockPilot Application
  # ========================
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: clockpilot-app-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 5000
      # Database configuration
      DATABASE_URL: ${DATABASE_URL}
      PGHOST: ${PGHOST}
      PGPORT: ${PGPORT}
      PGUSER: ${PGUSER}
      PGPASSWORD: ${PGPASSWORD}
      PGDATABASE: ${PGDATABASE}
      
      # Security
      JWT_SECRET: ${JWT_SECRET}
      SESSION_SECRET: ${SESSION_SECRET}
      BCRYPT_ROUNDS: 12
      
      # Redis
      REDIS_URL: ${REDIS_URL}
      
      # Monitoring
      LOG_LEVEL: warn
      SENTRY_DSN: ${SENTRY_DSN}
      ENABLE_METRICS: true
      
      # Performance
      DATABASE_POOL_SIZE: 20
      REQUEST_TIMEOUT: 30000
      
      # Security
      FORCE_HTTPS: true
      SECURE_COOKIES: true
      CORS_ORIGINS: ${CORS_ORIGINS}
      
      # Features
      FEATURE_NOTIFICATIONS: true
      FEATURE_EXPORT_PDF: true
      FEATURE_BULK_OPERATIONS: true
      FEATURE_ADVANCED_REPORTING: true
      
      # Localization
      DEFAULT_LANGUAGE: fr
      DEFAULT_TIMEZONE: Europe/Paris
    volumes:
      - app_uploads:/app/uploads
      - app_logs:/app/logs
    ports:
      - "5000:5000"
      - "9090:9090"  # Metrics port
    networks:
      - clockpilot-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    security_opt:
      - no-new-privileges:true

  # ========================
  # Nginx Reverse Proxy with SSL
  # ========================
  nginx:
    image: nginx:alpine
    container_name: clockpilot-nginx-prod
    restart: unless-stopped
    depends_on:
      app:
        condition: service_healthy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d/prod:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - clockpilot-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'

  # ========================
  # Monitoring Stack
  # ========================
  prometheus:
    image: prom/prometheus:latest
    container_name: clockpilot-prometheus
    restart: unless-stopped
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - clockpilot-network

  grafana:
    image: grafana/grafana:latest
    container_name: clockpilot-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - clockpilot-network

  # ========================
  # Log Aggregation
  # ========================
  loki:
    image: grafana/loki:2.9.0
    container_name: clockpilot-loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - clockpilot-network

  promtail:
    image: grafana/promtail:2.9.0
    container_name: clockpilot-promtail
    restart: unless-stopped
    volumes:
      - ./monitoring/promtail-config.yml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
      - app_logs:/app/logs:ro
      - nginx_logs:/var/log/nginx:ro
    command: -config.file=/etc/promtail/config.yml
    networks:
      - clockpilot-network

  # ========================
  # Backup Service
  # ========================
  backup:
    image: postgres:16-alpine
    container_name: clockpilot-backup-prod
    restart: "no"
    environment:
      PGPASSWORD: ${PGPASSWORD}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_DEFAULT_REGION: ${AWS_REGION:-eu-west-3}
      BACKUP_BUCKET: ${AWS_BACKUP_BUCKET}
    volumes:
      - ./backups:/backups
      - ./scripts/backup-prod.sh:/scripts/backup.sh:ro
    networks:
      - clockpilot-network
    command: |
      sh -c '
        apk add --no-cache aws-cli
        chmod +x /scripts/backup.sh
        while true; do
          /scripts/backup.sh
          sleep 86400  # Run daily
        done
      '

# ========================
# Volumes
# ========================
volumes:
  app_uploads:
    driver: local
  app_logs:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local

# ========================
# Networks
# ========================
networks:
  clockpilot-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16