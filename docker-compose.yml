# ========================
# Docker Compose for ClockPilot
# Development and Production Setup
# ========================

version: '3.8'

services:
  # ========================
  # PostgreSQL Database
  # ========================
  postgres:
    image: postgres:16-alpine
    container_name: clockpilot-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: clockpilot
      POSTGRES_USER: clockpilot_user
      POSTGRES_PASSWORD: ${PGPASSWORD:-secure_password_change_me}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=fr_FR.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    ports:
      - "5432:5432"
    networks:
      - clockpilot-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U clockpilot_user -d clockpilot"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # ========================
  # Redis Cache (Optional)
  # ========================
  redis:
    image: redis:7-alpine
    container_name: clockpilot-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password_change_me}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - clockpilot-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ========================
  # ClockPilot Application
  # ========================
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: clockpilot-app
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: production
      PORT: 5000
      DATABASE_URL: postgresql://clockpilot_user:${PGPASSWORD:-secure_password_change_me}@postgres:5432/clockpilot
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password_change_me}@redis:6379
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      SESSION_SECRET: ${SESSION_SECRET:-your-session-secret-key}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      TZ: Europe/Paris
    volumes:
      - app_uploads:/app/uploads
      - app_logs:/app/logs
    ports:
      - "5000:5000"
    networks:
      - clockpilot-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # ========================
  # Nginx Reverse Proxy
  # ========================
  nginx:
    image: nginx:alpine
    container_name: clockpilot-nginx
    restart: unless-stopped
    depends_on:
      - app
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - clockpilot-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ========================
  # Database Backup Service
  # ========================
  backup:
    image: postgres:16-alpine
    container_name: clockpilot-backup
    restart: "no"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      PGPASSWORD: ${PGPASSWORD:-secure_password_change_me}
    volumes:
      - ./backups:/backups
      - ./scripts:/scripts:ro
    networks:
      - clockpilot-network
    command: |
      sh -c '
        echo "Starting backup service..."
        while true; do
          echo "Creating backup at $$(date)"
          pg_dump -h postgres -U clockpilot_user -d clockpilot -f /backups/clockpilot_$$(date +%Y%m%d_%H%M%S).sql
          echo "Backup completed"
          # Keep only last 7 days of backups
          find /backups -name "clockpilot_*.sql" -mtime +7 -delete
          # Wait 24 hours
          sleep 86400
        done
      '

# ========================
# Development Override
# ========================
# Uncomment for development
  # app-dev:
  #   extends: app
  #   build:
  #     target: deps
  #   environment:
  #     NODE_ENV: development
  #     DEBUG: "true"
  #   volumes:
  #     - .:/app
  #     - /app/node_modules
  #   command: npm run dev

# ========================
# Volumes
# ========================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_uploads:
    driver: local
  app_logs:
    driver: local
  nginx_logs:
    driver: local

# ========================
# Networks
# ========================
networks:
  clockpilot-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16